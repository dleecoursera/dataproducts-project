dfbeta(df)
dfbetas(df)
fit5 <- lm(y~x)
hat(fit4)
hat(fit5)
hatvalues(fit5)
dfbetas(fit5)
summary(fit5)
?shuttle
??shuttle
library("MASS")
data(shuttle)
head(shuttle)
glm(shuttle$use~shuttle$wind, family="binomial")
glm(shuttle$use~shuttle$factor(wind), family="binomial")
glm(data=shuttle, use~factor(wind), family="binomial")
fit <- glm(data=shuttle, use~factor(wind), family="binomial")
coef
(fit)
coef(fit)
exp(coef(fit))
fit <- glm(data=shuttle, use~factor(wind)+magn, family="binomial")
exp(coef(fit))
fit <- glm(data=shuttle, 1-use~factor(wind)+magn, family="binomial")
a <- model.matrix(~use-1, data=shuttle)
View(a)
shuttle <- cbind(a, shuttle)
shuttle
a
fit1 <- glm(data=shuttle, useauto~wind, method="binomial")
shuttle
fit1 <- glm(data=shuttle, useauto~wind, family="binomial")
fit1
fit1 <- glm(data=shuttle, usenoauto~wind, family="binomial")
fit1
data(InsectSprays)
head(InsectSprays)
glm(data=InsectSprays, count~spray, family="poisson")
glm(data=InsectSprays, count~factor(spray), family="poisson")
fit2 <- glm(data=InsectSprays, count~factor(spray), family="poisson")
coef(fit2)
exp(coef(fit2))
fit2 <- glm(data=InsectSprays, count~factor(spray)+2, family="poisson")
str(InsectSprays)
fit2 <- glm(data=InsectSprays, count~rnorm(72,0)+2, family="poisson")
fit2 <- glm(data=InsectSprays, count~rnorm(72,0), family="poisson")
fit2
fit2 <- glm(data=InsectSprays, count~rnorm(72,0)+1, family="poisson")
fit2
fit2 <- glm(data=InsectSprays, count~rnorm(72,0)+log(1), family="poisson")
fit2 <- glm(data=InsectSprays, count~rnorm(72,0)+(log(1)), family="poisson")
?log
fit2 <- glm(data=InsectSprays, count~rnorm(72,0)+log10(2), family="poisson")
fit2 <- glm(data=InsectSprays, count~(rnorm(72,0)+log10(2)), family="poisson")
fit2 <- glm(data=InsectSprays, count~rnorm(72,0)+3, family="poisson")
fit2 <- glm(data=InsectSprays, count~rnorm(72,0)+1, family="poisson")
x1 <- c(1,0,1,1)
?ln
?log
x2 <- log(c(2,3,4,5))
count1 <- c(10,20,25,40)
fit3 <- glm(count1~x1+x2, family="poisson")
fit3
fit3 <- glm(count1~factor(x1)+x2, family="poisson")
fit3
fit3 <- glm(count1~factor(x1)+log10(x2), family="poisson")
fit3
x3 <- log10(c(2,3,4,5))
fit3 <- glm(count1~factor(x1)+x3, family="poisson")
fit3
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- seq(0, length=1)
knots
splineTerms <- sapply(knots, function (knot) (x>knot) * (x-knot))
xMat <- cbind(1, x, splineTerms)
View(xMat)
View(splineTerms)
yhat <- predict(lm(y~xMat-1))
yhat
lm(y~xMat-1)
lm(y~xMat)
plot(x,y)
lines(x,yhat, col="red")
fit2
fit1
fit3
fit2 <- glm(data=InsectSprays, count~spray, family="poisson")
fit2
exp(coef(fit2))
fit3 <- glm(count1~factor(x1), offset=log(x2), family="poisson")
fit3
fit4 <- glm(count1~factor(x1), offset=log10(x2), family="poisson")
fit4
fit3 <- glm(count1~factor(x1) + offset(x2), family="poisson")
fit4 <- glm(count1~factor(x1) + offset(log10(x2)), family="poisson")
fit3
fit4
fit3 <- glm(count1~factor(x1) + offset(log(x2)), family="poisson")
fit3
fit4
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
install.packages("rCharts")
library("rCharts")
library(rCharts)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(adData)
View(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(predictors)
hist(mixtures$SuperPlasticizer)
hist(as.numeric(mixtures$SuperPlasticizer))
View(mixtures)
hist(as.numeric(mixtures$Superplasticizer))
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(adData)
View(testing)
d <- AlzheimerDisease
?AlzheimerDisease
??AlzheimerDisease
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainp <- training[,grep("IL",training)]
View(trainp)
grep("IL",training)
grep(training,"IL")
View(training)
trainp <- training[,grep("IL",colnames(training))]
View(trainp)
prepro1 <- preProcess(trainp, method="pca")
prepro1
prepro1 <- preProcess(trainp, method="pca", p=0.9)
prepro1
prepro1 <- preProcess(trainp, method="pca", thresh=0.9)
prepro1
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
prepro2 <- preProcess(training, method="pca", thresh=0.8)
prerpo2
prepro2
prepro2 <- preProcess(training, method="pca", thresh=0.9)
prepro2
prepro2 <- preProcess(training, method="pca", thresh=0.8)
pred1 <- predict(prepro2, training)
pred1
modelfit1 <- train(diagnosis~., data=training, method="glm")
modelfit1
warnings()
modelfit2 <- train(diagnosis~., data=trainp, method="glm")
modelfit2 <- train(diagnosis~., data=pred1, method="glm")
warnings()
modelfit2
hist(as.numeric(mixtures$Superplasticizer))
prepro1 <- preProcess(trainp, method="pca", thresh=0.8)
prepro1
hist(as.numeric(log(mixtures$Superplasticizer))
)
hist(as.numeric(mixtures$Superplasticizer))
hist(as.numeric(log(mixtures$Superplasticizer))
)
hist(as.numeric(mixtures$Superplasticizer))
hist(as.numeric(log(mixtures$Superplasticizer)))
View(mixtures)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
data(iris)
iris
View(iris)
data(iris)
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
data(iris)
library(ggplot2)
g <- ggplot(iris, aes_string(input$xAxis, input$yAxis, color=input$color)) + geom_point()
g <- ggplot(iris, aes_string(Sepal.Length, Sepal.Width, color=Species)) + geom_point()
g <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) + geom_point()
g
iris2 <- iris[1,]
View(iris2)
iris2 <- iris[0,]
View(iris2)
iris2 <- iris[-1,]
iris2 <- iris[0,]
iris2 <- rbind(iris2, iris[1,])
View(iris2)
g <- g + geom_point(data=iris2, color="red", size="3")
g
g <- g + geom_point(data=iris2, color="red", size=3)
g
g <- ggplot(iris, aes_string(input$xAxis, input$yAxis, color=input$color)) + geom_point()
g <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) + geom_point()
g
g2 <- g + geom_point(data=iris2, color="red", size=3)
g2
g
g2
g2 <- g + geom_point(data=iris2, color="red", size=5)
g2
g2 <- g + geom_point(data=iris2, color="yellow", size=5)
g2
g2 <- g + geom_point(data=iris2, color="cyan", size=5)
g2
g2 <- g + geom_point(data=iris2, color="red", size=10)
g2
g2 <- g + geom_point(data=iris2, color="red", size=8)
g2
newPoint <- c(1,2,3,4)
iris3 <- rbind(iris, newPoint)
View(iris3)
iris3 <- rbind(iris2, newPoint)
View(iris3)
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
iris2 <- iris[0, ]
iris2 <- rbind(iris2, c(1,2,3,4,"species"))
View(iris2)
shiny::runApp('C:/coursera/dataproducts_app')
iris2 <- iris[0, ]
iris2 <- rbind(iris2, iris[1,])
ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) + geom_point()
+ geom_point(data=iris2, color="red", size=8)
g <- ggplot(iris, aes(Sepal.Length, Sepal.Width, color=Species)) + geom_point()
g <- g + geom_point(data=iris2, color="red", size=8)
g
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
?train
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
iris2
library(Caret)
library(caret)
modelfit <- train(Species~.,data=iris,method="rpart")
predict(modelfit, iris2)
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
isolate(iris2 <- iris[0, ])
isolate(iris2 <- iris[0, ])
isolate(iris2[1, ] <- c(as.numeric(input$sLengthIn),as.numeric(input$sWidthIn),
as.numeric(input$pLengthIn),as.numeric(input$pWidthIn),
as.factor("species")))
isolate(pred <- predict(modelfit, iris2))
as.factor(pred)
modelfit <- train(Species~.,data=iris,method="rpart")
input$sLengthIn <- 1
isolate(iris2 <- iris[0, ])
isolate(iris2[1, ] <- c(1,1,
1,1,
as.factor("species")))
isolate(pred <- predict(modelfit, iris2))
as.factor(pred)
pred
str(pred)
pred[1]
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
shiny::runApp('C:/coursera/dataproducts_app')
install.packages("shinyapps")
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
install.packages("Rtools")
devtools::install_github('rstudio/shinyapps')
install.packages("RCurl")
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='bloop7676', token='A6F53BB3652EDEDC7E2DC89721756DA1', secret='ZT23VYOU8WRxPfhi3sTp7J1WFLJHtKSf8GUsNbL6')
library(shinyapps)
setwd("C:\\coursera")
shinyapps:deployApp('dataproducts_app')
shinyapps::deployApp('dataproducts_app')
shiny::runApp('dataproducts_app')
shinyapps::deployApp('dataproducts_app')
shiny::runApp('dataproducts_app')
install.packages("tree")
shiny::runApp('dataproducts_app')
shinyapps::deployApp('dataproducts_app')
shiny::runApp('dataproducts_app')
shiny::runApp('dataproducts_app')
shinyapps::deployApp('dataproducts_app')
shiny::runApp('dataproducts_app')
shiny::runApp('dataproducts_app')
shiny::runApp('dataproducts_app')
shinyapps::deployApp('dataproducts_app')
shiny::runApp('dataproducts_app')
shinyapps::deployApp('dataproducts_app')
modelfit <- rpart(Species~.,data=iris)
modelfit
pred <- predict(modelfit, iris2)
pred
pred[1]
shiny::runApp('dataproducts_app')
shiny::runApp('dataproducts_app')
shiny::runApp('dataproducts_app')
shiny::runApp('dataproducts_app')
shiny::runApp('dataproducts_app')
shiny::runApp('dataproducts_app')
shinyapps::deployApp('dataproducts_app')
library(devtools)
install_github('slidify')
install_github('slidify', 'ramnathv')
library(slidify)
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
library(stringr)
install.packages(stringr)
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
update.packages("stringr")
library(slidify)
setwd("C:\\couresra")
setwd("C:\\coursera")
author("dataproducts_deck")
---
---
---
title       :
subtitle    :
author      :
job         :
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
title       :
subtitle    :
